<!-- views/exhibitions/single-artwork-3d.ejs -->
<div class="container-fluid px-0">
  <div class="row g-0">
    <!-- 3D View Section -->
    <div class="col-lg-8 position-relative">
      <div id="exhibition-container" style="height: 100vh;"></div>
      
      <!-- Loading Overlay -->
      <div class="loading-overlay" id="loading-overlay">
        <div>
          <div class="spinner mb-3"></div>
          <p class="text-center">Loading 3D View...</p>
        </div>
      </div>
      
      <!-- First Person Mode Toggle -->
      <div class="first-person-mode position-absolute top-0 start-0 m-3">
        <div class="form-check form-switch bg-white p-2 rounded shadow-sm">
          <input class="form-check-input" type="checkbox" id="firstPersonToggle">
          <label class="form-check-label" for="firstPersonToggle">First Person Mode</label>
        </div>
      </div>
      
      <!-- Controls Panel -->
      <div class="exhibition-controls position-absolute bottom-0 start-0 m-3 bg-white p-2 rounded shadow-sm">
        <button class="btn btn-sm btn-outline-dark me-2" id="zoom-in">
          <i class="fas fa-search-plus"></i> Zoom In
        </button>
        <button class="btn btn-sm btn-outline-dark me-2" id="zoom-out">
          <i class="fas fa-search-minus"></i> Zoom Out
        </button>
        <button class="btn btn-sm btn-outline-dark" id="reset-camera">
          <i class="fas fa-sync"></i> Reset View
        </button>
      </div>
    </div>
    
    <!-- Info Panel -->
    <div class="col-lg-4 vh-100 overflow-auto">
      <div class="p-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
          <h1 class="h3"><%= artwork.title %></h1>
          <a href="<%= artwork.imageUrl ? `/artworksurl/${artwork._id}` : `/artworks/${artwork._id}` %>" class="btn btn-outline-primary">
            <i class="fas fa-arrow-left"></i> Back to Details
          </a>
        </div>
        
        <!-- Artwork Image -->
        <div class="card mb-4">
          <img src="<%= artwork.imageUrl || `/uploads/${artwork.image}` %>" class="card-img-top" alt="<%= artwork.title %>" onerror="this.src='/img/image-not-found.jpg'">
        </div>
        
        <!-- Artwork Info -->
        <div class="card mb-4">
          <div class="card-header">
            <h2 class="h5 mb-0">Artwork Information</h2>
          </div>
          <div class="card-body">
            <p><strong>Artist:</strong> <%= artwork.artist.name %></p>
            <p><strong>Category:</strong> <%= artwork.category %></p>
            <p><strong>Price:</strong> $<%= artwork.price.toFixed(2) %></p>
            <p><strong>Status:</strong> <span class="badge <%= artwork.forSale ? 'bg-success' : 'bg-secondary' %>">
              <%= artwork.forSale ? 'For Sale' : 'Not For Sale' %>
            </span></p>
            
            <% if (artwork.dimensions) { %>
            <p><strong>Dimensions:</strong> 
              <%= artwork.dimensions.width %> × <%= artwork.dimensions.height %>
              <% if (artwork.dimensions.depth > 0) { %> × <%= artwork.dimensions.depth %><% } %> 
              <%= artwork.dimensions.unit %>
            </p>
            <% } %>
            
            <hr>
            
            <h3 class="h6">Description</h3>
            <p><%= artwork.description %></p>
          </div>
        </div>
        
        <!-- Controls Info -->
        <div class="card mb-4">
          <div class="card-header">
            <h2 class="h5 mb-0">Controls</h2>
          </div>
          <div class="card-body">
            <p><strong>Standard View:</strong></p>
            <ul>
              <li>Click and drag to rotate the view</li>
              <li>Scroll to zoom in and out</li>
              <li>Use the control panel to zoom and reset the view</li>
            </ul>
            
            <p><strong>First Person Mode:</strong></p>
            <ul>
              <li>Use WASD or arrow keys to move around</li>
              <li>Move your mouse to look around</li>
              <li>Click on the artwork to see details</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Artwork Details Panel -->
  <div id="artwork-details" class="artwork-details" style="display: none;">
    <button type="button" class="btn-close float-end" onclick="document.getElementById('artwork-details').style.display='none'"></button>
    <div id="artwork-content">
      <h4>Select an artwork</h4>
      <p>Click on the artwork to view details.</p>
    </div>
  </div>
</div>

<!-- Custom 3D Script -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Artwork data with proper URL handling
    const artwork = {
      id: '<%= artwork._id %>',
      title: '<%= artwork.title %>',
      description: '<%= artwork.description %>',
      imageUrl: '<%= artwork.imageUrl || `/uploads/${artwork.image}` %>',
      price: <%= artwork.price %>,
      forSale: <%= artwork.forSale %>,
      artist: {
        name: '<%= artwork.artist.name %>'
      }
    };
    
    // Create a simple gallery since we don't have the Gallery3D class yet
    const container = document.getElementById('exhibition-container');
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xf0f0f0);
    
    const camera = new THREE.PerspectiveCamera(
      75,
      container.clientWidth / container.clientHeight,
      0.1,
      1000
    );
    camera.position.set(0, 1.6, 5);
    
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(container.clientWidth, container.clientHeight);
    renderer.shadowMap.enabled = true;
    container.appendChild(renderer.domElement);
    
    const controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;
    
    // Add lights
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);
    
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(5, 10, 7.5);
    directionalLight.castShadow = true;
    scene.add(directionalLight);
    
    // Create simple room
    const roomWidth = 20;
    const roomHeight = 4;
    const roomDepth = 20;
    
    // Floor
    const floorGeometry = new THREE.PlaneGeometry(roomWidth, roomDepth);
    const floorMaterial = new THREE.MeshStandardMaterial({
      color: 0xaaaaaa,
      roughness: 0.8
    });
    const floor = new THREE.Mesh(floorGeometry, floorMaterial);
    floor.rotation.x = -Math.PI / 2;
    floor.position.y = 0;
    floor.receiveShadow = true;
    scene.add(floor);
    
    // Walls
    const wallMaterial = new THREE.MeshStandardMaterial({
      color: 0xffffff,
      roughness: 0.9
    });
    
    // Back wall
    const backWall = new THREE.Mesh(
      new THREE.PlaneGeometry(roomWidth, roomHeight),
      wallMaterial
    );
    backWall.position.set(0, roomHeight / 2, -roomDepth / 2);
    backWall.receiveShadow = true;
    scene.add(backWall);
    
    // Load artwork
    const textureLoader = new THREE.TextureLoader();
    textureLoader.crossOrigin = 'Anonymous';
    
    // Show loading first
    const loadingOverlay = document.getElementById('loading-overlay');
    
    textureLoader.load(
      artwork.imageUrl,
      function(texture) {
        // Hide loading overlay
        loadingOverlay.style.display = 'none';
        
        const aspectRatio = texture.image.width / texture.image.height;
        const width = 3;
        const height = width / aspectRatio;
        
        // Create frame
        const frameGeometry = new THREE.BoxGeometry(width + 0.1, height + 0.1, 0.05);
        const frameMaterial = new THREE.MeshStandardMaterial({ 
          color: 0x222222,
          roughness: 0.8,
          metalness: 0.2
        });
        const frame = new THREE.Mesh(frameGeometry, frameMaterial);
        frame.position.set(0, roomHeight/2, -roomDepth/2 + 0.1);
        frame.castShadow = true;
        
        // Create artwork
        const artGeometry = new THREE.PlaneGeometry(width, height);
        const artMaterial = new THREE.MeshStandardMaterial({ 
          map: texture,
          side: THREE.DoubleSide
        });
        const art = new THREE.Mesh(artGeometry, artMaterial);
        art.position.set(0, roomHeight/2, -roomDepth/2 + 0.15);
        
        // Add to scene
        scene.add(frame);
        scene.add(art);
        
        // Spotlight for the artwork
        const spotLight = new THREE.SpotLight(0xffffff, 1);
        spotLight.position.set(0, roomHeight - 1, -roomDepth/2 + 3);
        spotLight.target = art;
        spotLight.angle = Math.PI / 8;
        spotLight.penumbra = 0.3;
        spotLight.decay = 2;
        spotLight.distance = 10;
        spotLight.castShadow = true;
        spotLight.shadow.mapSize.width = 512;
        spotLight.shadow.mapSize.height = 512;
        scene.add(spotLight);
        
        // Event listener for clicking the artwork
        const raycaster = new THREE.Raycaster();
        const mouse = new THREE.Vector2();
        
        renderer.domElement.addEventListener('click', function(event) {
          const rect = renderer.domElement.getBoundingClientRect();
          mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
          mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
          
          raycaster.setFromCamera(mouse, camera);
          const intersects = raycaster.intersectObjects([art]);
          
          if (intersects.length > 0) {
            showArtworkDetails(artwork);
          }
        });
      },
      undefined,
      function(error) {
        console.error('Error loading texture:', error);
        loadingOverlay.innerHTML = '<div class="text-center"><p>Error loading artwork image.</p><p>Please try again later.</p></div>';
      }
    );
    
    // Controls
    document.getElementById('zoom-in').addEventListener('click', function() {
      if (camera.position.z > 2) {
        camera.position.z -= 1;
      }
    });
    
    document.getElementById('zoom-out').addEventListener('click', function() {
      if (camera.position.z < 20) {
        camera.position.z += 1;
      }
    });
    
    document.getElementById('reset-camera').addEventListener('click', function() {
      camera.position.set(0, 1.6, 5);
      controls.target.set(0, 0, 0);
      controls.update();
    });
    
    // First person controls
    let isFirstPerson = false;
    let moveForward = false;
    let moveBackward = false;
    let moveLeft = false;
    let moveRight = false;
    const velocity = new THREE.Vector3();
    const direction = new THREE.Vector3();
    const clock = new THREE.Clock();
    
    document.getElementById('firstPersonToggle').addEventListener('change', function(event) {
      isFirstPerson = event.target.checked;
      
      if (isFirstPerson) {
        controls.enabled = false;
        document.body.style.cursor = 'none';
      } else {
        controls.enabled = true;
        document.body.style.cursor = 'auto';
      }
    });
    
    document.addEventListener('keydown', function(event) {
      if (!isFirstPerson) return;
      
      switch (event.code) {
        case 'ArrowUp':
        case 'KeyW':
          moveForward = true;
          break;
        case 'ArrowLeft':
        case 'KeyA':
          moveLeft = true;
          break;
        case 'ArrowDown':
        case 'KeyS':
          moveBackward = true;
          break;
        case 'ArrowRight':
        case 'KeyD':
          moveRight = true;
          break;
      }
    });
    
    document.addEventListener('keyup', function(event) {
      if (!isFirstPerson) return;
      
      switch (event.code) {
        case 'ArrowUp':
        case 'KeyW':
          moveForward = false;
          break;
        case 'ArrowLeft':
        case 'KeyA':
          moveLeft = false;
          break;
        case 'ArrowDown':
        case 'KeyS':
          moveBackward = false;
          break;
        case 'ArrowRight':
        case 'KeyD':
          moveRight = false;
          break;
      }
    });
    
    function updateFirstPersonControls() {
      if (!isFirstPerson) return;
      
      const delta = clock.getDelta();
      
      velocity.x -= velocity.x * 10.0 * delta;
      velocity.z -= velocity.z * 10.0 * delta;
      
      direction.z = Number(moveForward) - Number(moveBackward);
      direction.x = Number(moveRight) - Number(moveLeft);
      direction.normalize();
      
      if (moveForward || moveBackward) velocity.z -= direction.z * 15.0 * delta;
      if (moveLeft || moveRight) velocity.x -= direction.x * 15.0 * delta;
      
      camera.translateX(velocity.x * delta);
      camera.translateZ(velocity.z * delta);
      
      camera.position.y = 1.6;
    }
    
    // Animation loop
    function animate() {
      requestAnimationFrame(animate);
      
      if (isFirstPerson) {
        updateFirstPersonControls();
      } else {
        controls.update();
      }
      
      renderer.render(scene, camera);
    }
    
    animate();
    
    // Window resize handler
    window.addEventListener('resize', function() {
      camera.aspect = container.clientWidth / container.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(container.clientWidth, container.clientHeight);
    });
    
    // Show artwork details
    function showArtworkDetails(artwork) {
      const detailsPanel = document.getElementById('artwork-details');
      const detailsContent = document.getElementById('artwork-content');
      
      detailsContent.innerHTML = `
        <h4>${artwork.title}</h4>
        <img src="${artwork.imageUrl}" alt="${artwork.title}" class="img-fluid mb-3" style="max-height: 200px;" onerror="this.src='/img/image-not-found.jpg'">
        <p><strong>Artist:</strong> ${artwork.artist.name}</p>
        <p>${artwork.description}</p>
        <p><strong>Price:</strong> $${artwork.price.toFixed(2)}</p>
        <p><strong>Status:</strong> ${artwork.forSale ? 'For Sale' : 'Not For Sale'}</p>
        <a href="${artwork.imageUrl.includes('/uploads/') ? '/artworks/' : '/artworksurl/'}${artwork.id}" class="btn btn-primary btn-sm">View Details</a>
      `;
      
      detailsPanel.style.display = 'block';
    }
  });
</script>